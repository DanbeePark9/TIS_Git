순서1]
https://git-scm.com/

순서2] 
Git-2.27.0-64-bit.exe파일선택 더블클릭

순서3]
https://github.com/posasi2000/sp.git

순서4]
 C:\Mtest
   |-zoom
      |- 일반파일 blue.txt, 그림파일, 폴더 다양한종류파일존재

C:\Mtest\zoom> git remote  rm origin  ===> 다른사람껏오리진삭제
C:\Mtest\zoom> git --version  ===> 버젼확인
C:\Mtest\zoom> git            ===> 깃명령어
C:\Mtest\zoom> cls
C:\Mtest\zoom> dir
C:\Mtest\zoom> git init       ===> 숨겨진폴더생성 .git
C:\Mtest\zoom> dir
C:\Mtest\zoom> git status     ===> red색으로 표시 

C:\Mtest\zoom> git add blue.txt     
C:\Mtest\zoom> git status     ===> red색 사라짐

C:\Mtest\zoom> git commit  -m  "설명~"   ===>로컬저장소로 이동
C:\Mtest\zoom> git remote      ===> 아무런표시없음

실습금지 
C:\Mtest\zoom> git remote add origin "여러분의깃주소레파지토리확인"

C:\Mtest\zoom> git remote add origin "https://github.com/posasi2000/sp.git"
C:\Mtest\zoom> git remote      ===> origin표시
C:\Mtest\zoom> git push origin master    ===> 진짜git올라가요
C:\Mtest\zoom> git push origin master입력하면
                 |- id입력,pwd입력 대화상자

C:\Mtest\zoom> git push origin master   ===> 에러발생하면 
C:\Mtest\zoom> git pull origin master   ===> 먼저 pull땡겨오고 push하세요

*****깃허브에서 원격/로컬저장소 공통분모가 없을때 에러발생하면 아래명령어
C:\Mtest\zoom> git pull origin master --allow-unrelate-histories
C:\Mtest\zoom> git push origin master   


C:\Mtest\zoom> git add two.txt     
C:\Mtest\zoom> git status     ===> red색 사라짐
C:\Mtest\zoom> git commit  -m  "설명~"   ===>로컬저장소로 이동

아래명령어 처음 한번만 기술하면 되니까 기술생략
C:\Mtest\zoom> git remote add origin "깃주소~si2000/sp.git"
C:\Mtest\zoom> git remote      ===> origin표시
C:\Mtest\zoom> git push origin master   ===> 에러발생하면 

혹시 본인컴퓨터에 누가 origin사용하고 있으면 자격증명관리자에서 삭제 
제어판 ==> 자격증명관리자
 일반자격증명
  git:https://github.com 수정날짜 오늘
  |-편집클릭 사용자및암호를 본인꺼 








===============================================================
|- Stored procedure프로시저처리, 자바문서에서 SP처리  ==>깃에올리기                                   
7월네째주 이클립스에서 작업= java + 데이터베이스 + html + javascript
  |- 게시판 페이징 
  |- 게시판 페이징 + 검색
                    |- 서브쿼리
  |- 게시판 페이징 + 검색 + 댓글
                          | - 제약조건 추가, 조인 
  |- 자바스크립트
      |- jQuery , Bootstrap, Ajax
  
  |- MVC2
  |- 게시판 페이징 + 검색 + 댓글
      |- ERD프로그램 = 스키마구조 
  |- spring
      |- springSTS, springBoot, spring전자정부프레임워크
  

  |- Stored procedure프로시저처리, 자바문서에서 SP처리  ==>깃에올리기 

  https://github.com/posasi2000/storedprocedure.git
  



///////////////////////////////////////////////////////////////////
304페이지  프로시저 실습을 위해서 jobs테이블 
39페이지   임포트명령어 한줄로 기술
9장  function함수  procedure프로시저 필요한 employess테이블
39페이지 보면서 import명령어으로 가져오기
저자의 깃주소로 가서 데이터 다운받아요 

윈도우탐색에서  C:\
              backup폴더 생성

윈도우시작 cmd
C:\Users\USER> cd..
C:\Users> cd..
C:\> cd backup
C:\backup>


C:\Users\USER> cd\  설명 cd\
C:\> cd backup
C:\backup>


backup> imp system/1234  file=expall.dmp  log=empall.log ignore=y grants=y  indexes=y full=y
backup> imp system/1234  file=expcust.dmp log=empcust.log ignore=y grants=y  indexes=y full=y

C:\backup> imp
    system/1234  file=expall.dmp 
    log=empall.log ignore=y grants=y indexes=y full=y

SQL>commit ;
SQL> select * from emp ;  --강사쌤이 준거  11g ==>ibm사에서 동일 
      empno, ename, job ~~, comm, deptno
 

SQL> select * from employees ;  --SQL교재 12c
      employee_id
      emp_name
      commision_pct
      department_id


304페이지  프로시저 실습을 위해서 jobs테이블 
SQL> select * from jobs ; 

SQL> edit C:\Mtest\304page.sql
     메모장에 코드 기술

SQL> start C:\Mtest\304page.sql

     where job_id = i 있으면 갱신=수정
     where job_id = i 없으면 신규등록

SQL> col job_title for a40
SQL> select job_id, job_title from jobs ;

SQL> exec my_new_job_proc(id,t,최소s,최대s,시작날짜,수정날짜)
SQL> exec my_new_job_proc('TT_CODE','developer', 120,980)

SQL> exec my_new_job_proc(
          'TT_CODE','developer', 120,980)


SQL> exec my_new_job_proc(
          'AD_VP','team', 77,888)



342페이지  커서=cursor
커서 = 처리결과를 기억하는 포인터=지시자역할
    ResultSet RS =  ST.executeQuery("select * from guest ");

    PST = CN.prepareStatement("insert ~ values(?,?,sysdate)"); 
    int OK = PST.exectueUpdate( );



=========================================================
C:\backup> imp 
        system/1234  
        file=expcust.dmp 
        log=empcust.log 
        ignore=y grants=y  indexes=y full=y

SQL> select table_name  from user_tables ;

 create table sales (
    prod_id	number(6,0) not null,
    cust_id	number(6,0) not null,
    channel_id 	number(6,0) not null,
    employee_id number(6,0) not null,
    sales_date 	date default sysdate not null,
    sales_month varchar2(6 ),
    quantity_sold	number(10,2),
    amount_sold number(10,2),
    create_date date default sysdate,
    update_date date default sysdate
 );
 commit ;



	70-13-월요일
	col name for a10
	col title for a10
	col email for a12
	col sabun for 9999
	col pay for 999
SQL> select * from  guest  ;
SQL> select  object_name from user_procedures ;

SQL> set serverouput on 



	DBTest.java      ===> test 테이블
	DBGuest.java     ===> guest 테이블
	DBGuestTis.java  ===>guest 테이블

 class DBGuestTis {
   Connection CN ;
   CallableStatement CST; 프로시저처리명령어
   ResultSet RS ;

  public DBGuestTis() {생성자 DB서버연결정보 CN=~~} 
  public void guestSelectAll( ){전체출력 msg="select * from guest"} 

  public void guestEdit(){ 
     스토아ed프로시저 guest_sp_update
  }

  public void guestInsert(){ 
     스토아ed프로시저 guest_sp_insert
  }


 }//DBGuestTis class END



::::::guest테이블에서 stored procedure 수정=update:::::에러없음
SQL> create  or replace  procedure  guest_sp_update
    (
    p_sabun  in  number ,
    p_name  in  varchar2 ,
    p_title  in  varchar2 ,
    p_pay   in  number,
    p_email  in  varchar2 
   ) is
  begin 
    update guest set name=p_name, title=p_title,
      wdate=sysdate, pay=p_pay , hit =7, email=p_email
            where sabun=p_sabun ;
 end;
/

SQL> select  * from  guest  ;
SQL> exec guest_sp_update(7700,'you','you',99,'you@kr.or' ) ;
SQL> select  * from  guest  ;

조인join
 |- inner조인, outer조인, self조인, Full조인 
 
서브쿼리
 메인쿼리+서브쿼리
  1) 스칼라 서브쿼리
     select, name,(select ~where  ) replycnt, title from guest ;
  
  2) 인라인 서브쿼리
        select  * from (
           select rownum rn, g.* from guest g
        ) where rn between 11 and 20

  3) 중첩질의
 select * from emp where sal < (select sal from emp where ename='MATIN' );


7월10일 금요일  프로시저생성+java코드에서 명령어사용  
7월13일 월요일  304페이지 프로시저생성  select , insert, update 
7월14일 화요일  VirturalBox  + 센토스7 설치
               |- 자바코드기술 
7월15일 수요일  Window서 visual studio 설치해서 C작업
              이클립스에서 C작업
              리눅스에서 C작업 
             입력/출력/제어/반복/배열/함수 알고리즘 
 
                 
7월네째주 이클립스에서 작업= java + 데이터베이스 + html + javascript
  |- 게시판 페이징 
  |- 게시판 페이징 + 검색
                    |- 서브쿼리
  |- 게시판 페이징 + 검색 + 댓글
                          | - 제약조건 추가, 조인 
  |- 자바스크립트
      |- jQuery , Bootstrap, Ajax
  
  |- MVC2
  |- 게시판 페이징 + 검색 + 댓글
      |- ERD프로그램 = 스키마구조 
  |- spring
      |- springSTS, springBoot, spring전자정부프레임워크
  

  |- Stored procedure프로시저처리, 자바문서에서 SP처리  ==>깃에올리기 

  https://github.com/posasi2000/storedprocedure.git
  








 








=================================================================================
274페이지  조건
  if  조건  then
    조건만족시 처리할내용
  elseif 조건  then
    조건만족시 처리할내용
  end if ;


278페이지 Loop반복, while, for, continue, goto 이름
 loop
  exit  when  cs1%notfound  -----14번라인   
 end loop; 


283페이지  goto  fourth
 <<fourth>>

285페이지 프로시저 =procedure= 처리 = 처리를 하는데 이름을 명명=함수=function=메소드=method  
오라클에서 내장함수 함수
  count(), nvl(), to_char(), to_date()
  sum(),max(),min(),avg(), abs(-34), Lpad()
  sysdate함수대신 필드 
 
  시퀀스이름.nextval(), 시퀀스이름.currval()
 

오라클에서 내장함수대신 우리가 수작업으로 직접 함수작성
 create table 명명( );
 create view 명명( );
 create sequence 명명( );
 create index 명명( );
 create synonym 명명( );
 아직안함 create user 명명( );
 아직안함 create tablespace 명명( );==>grant,revoke실습


285페이지 함수생성  
289페이지 function기술 fn_get_user
 create or replace  function myTIS()
  is                //nvl(comm,31), myTIS()
  ~~return 
 /

 
290페이지 prodedure기술  //실행 exec   myGuest ~
 create or replace  procedure myGuest
   in/out
   is
   begin
    진짜쿼리문기술
   exception 
  end ;
 / 

291페이지 실행 exec   myGuest ~

299페이지 prodedure기술문장은 참고만 하셔요
create or replace procedure my_new_job_proc
  ~~
  begin
   

304페이지 jobs테이블 





select  2+3*7    from dual;
select  2+3*7  합계  from dual;
select  2+3*7  as "hap"  from dual;  
select  2+3*7  as 'hap'  from dual;  --error
select  2+3*7  as  hap  from dual; 
select  2+3*7  hap  from dual; 

select to_char(sysdate, 'day') from dual;
select to_char(sysdate, 'dy') from dual;
select wdate, to_char(wdate, 'day') 요일 from guest;







/////////////////////////////////////////////////////////////////
	DBTest.java   ===>test
	DBGuest.java  ===>guest (신규등록,삭제,수정 금지)
	 |- 전체출력, 페이지, 검색
	 |- 1전체출력   2페이지  3이름검색 >>> 3
 
            원하는페이지>>> 7 
		61
		62

		69
		70	
             
	
	   원하는이름검색어>>> b 검색하면 62건
	   페이지출력>>> 2
           page=2
           start = 2-1*10+1
 	   end = 2*10

select * from (
 select rownum rn, g.* from (
   select * from guest order by sabun) g where name like '%" +find+"%'"
) where rn between  " +start + " and  " + end;


	DDL - create, drop, alter
	DML - insert, delete, update, select
	DCL - revoke, grant

	Procedure처리 Language언어 = Stored Procedure
	 |- 자바에서 메소드
	 |- 자바스크립트에서 함수function

 create table sosiCOPY
  as
  select * from  sosi ;



 152페이지 집계함수
 select  ename, sum(sal) from  emp ;
 select  sum(sal) from  emp ;
 select  deptno, sum(sal) from  emp  
         group by deptno ;

 156페이지 group by having

 185페이지
 empno, ename, job,  dname, loc
 
 select empno, ename, job, dname, loc
  from emp , dept
  where emp.deptno = dept.deptno ;


 185페이지
 empno, ename, job, deptno,  dname, loc

186페이지, 187페이지
 select * from dept;

 select e.empno, e.ename, 
        e.job, e.deptno, d.dname, d.loc
	from  emp e , dept d
        where e.deptno = d.deptno ;

 select e.empno, e.ename, 
        e.job, e.deptno, d.dname, d.loc
	from  emp e  inner join  dept d
        on e.deptno = d.deptno;  ---이런표기를 ANSI

select * from  emp  where ename != 'MARTIN' ;
select * from  emp  where ename <> 'MARTIN' ;
select * from  emp  where ename not in 'MARTIN' ;



 col empno for 9999
 col deptno for 999
 col dname for a12
 col ename for a12

외부조인outer조인

 select e.empno, e.ename, 
        e.job, e.deptno, d.dname, d.loc
	from  emp e , dept d
        where e.deptno = d.deptno ;

 select * from dept;


insert into emp
values(9997,'aa','code',7788,sysdate, 321,0,77);

commit ;
select * from  emp ;


 select e.empno, e.ename, 
    e.job, e.deptno, d.dname, d.loc
    from  emp e  inner join  dept d
    on e.deptno = d.deptno;


 select e.empno, e.ename, 
   e.job, e.deptno, d.dname, d.loc
   from  emp e  right outer join  dept d
   on e.deptno = d.deptno; 

 select e.empno, e.ename, 
   e.job, e.deptno, d.dname, d.loc
   from  emp e  left outer join  dept d
   on e.deptno = d.deptno; 


   emp테이블 + depta테이블의 관계설정 ===>키값연결이 안되어있어요
   select * from  dept ;
   select * from  emp ;

insert into emp
values(9997,'aa','code',7788,sysdate, 321,0,77);

commit ;
select * from  emp ;

======================조회스토아프로시저에서 
======================조회스토아프로시저에서 
ibm사이트참조
https://www.ibm.com/support/knowledgecenter/ko/SSEPGG_11.1.0/com.ibm.db2.luw.apdv.plsql.doc/doc/c0053892.html
https://~/ko/SSEPGG_11.1.0/com.ibm.db2.luw.apdv.plsql.doc/doc/c0053892.html



============================================================
============================================================
============================================================
--이너조인 
           
 select empno, ename, job, dname
    from emp inner join  dept
    on emp.deptno=dept.deptno ;


 select  e.empno, e.ename, d.deptno,  d.dname, d.loc
	from emp e,  dept  d
	where  e.deptno = d.deptno ; 


-- Non-equ=넌이퀴조인 
select  empno, ename, sal,  grade 
 from emp e, salgrade   s
  where  e.sal  between   s.losal  and s.hisal  ;


select  empno, ename, sal,  grade 
  from emp e  inner join   salgrade   s
  on e.sal   between   s.losal  and s.hisal  ; 


-- outer조인 (right, left ) 
--아웃터조인을 실습하기 위해서  dept부서 3건정도 부서 추가시킴 먼저꼭꼭!!!!
SQL> select * from  dept ;


select  e.empno, e.ename, d.deptno,  d.dname
  from emp e,  dept  d
  where  e.deptno(+) = d.deptno ;  //실습후  d.deptno(+)

select  e.empno, e.ename, d.deptno,  d.dname
        from emp e   right  outer  join   dept  d  
        on  e.deptno = d.deptno  ;

select  e.empno, e.ename, d.deptno,  d.dname
	 from emp e   left  outer  join   dept  d
	 on  e.deptno = d.deptno ; 


--Full Outer
select  e.empno, e.ename, d.deptno,  d.dname, d.loc
     from  emp e    FULL  Outer  JOIN     dept  d
     on  e.deptno = d.deptno ; 
 --Right아웃터조인과 같음 =>deptno순서대로 출력



--Self  조인
SQL> select  * from emp;
--MGR 필드랑 empno필드랑 잘 비교해보세요
--7839번호 king이면서  대장이 없습니다 
--7698번, 7782번 MGR를 보면 7839번대장번호입니다.
--꼭 상급자만 있는사람 출력됨 

 SELECT e.ename || '의 매니저는 ' || m.ename || '입니다.'
   from emp e, emp m WHERE e.mgr = m.empno(+);
--참고 7521 ward씨는 mgr에서 사용안함, 7654 martin씨는 mgr에서 사용안함

 select  e.empno  as  사원번호 ,  e.ename  as 사원이름,
    m.empno  as 상급번호  , m.ename   as 상사이름
    from  emp  e,   emp  m
    where  e.mgr=m.empno 
    order by  m.ename ;



--시노님(동의어) 
--시노님은 개체사용을 편리하게 하기 위해 생성한 개체 이름에 대한 동의어
Create   Synonym  이름
For 개체명 

SQL> create  synonym  grade
         For  salgrade ;

SQL> select  * from salgrade ;
SQL> select  * from  grade ; 
--시너님 정보확인
SQL>  select  synonym_name, table_owner, table_name
           from user_synonyms;   

--시너님삭제
SQL> drop synonym  시노님 ;

SQL> drop table emp3;
SQL> commit ;  
SQL> create table emp3
     as
     select * from  emp ;
SQL> commit ;
SQL> select empno, ename, deptno,job from emp3;


SQL> select * from emp ;
SQL> drop index  idx_emp3
SQL> create index  idx_emp3  on emp3(deptno,empno);
SQL> desc emp3 ;  --테이블구조확인

SQL> select empno, ename, deptno, job from emp3 
         where empno>0 and deptno > 0 ;  -- 인덱스적용

SQL> select empno, ename, deptno, job from emp3  
         order by  deptno, empno ;


	stored procedure
	 |- 금요일오후
	 |- 월요일  CallableStatement응용 
	
============================================================
============================================================
============================================================


drop table emp ;
drop table dept ;
drop table salgrade ;
drop table bonus ;


CREATE TABLE dept (
   DEPTNO int,
   DNAME VARCHAR(14),
   LOC VARCHAR(13)
 );

INSERT INTO DEPT VALUES (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES (30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES (40,'OPERATIONS','BOSTON');
insert into dept values( 33, 'developer',  'suwon' );
insert into dept values( 22, 'coder ',  'seoul' );
insert into dept values( 11, 'designer ',  'LA' );


CREATE TABLE emp (
   EMPNO int not null ,
   ENAME VARCHAR(10) ,
   JOB VARCHAR(9) ,
   MGR int ,
   HIREDATE date ,
   SAL int ,
   COMM int ,
   DEPTNO int
 );

commit;
INSERT INTO EMP VALUES(7369,'SMITH','CLERK',7902,'1980-12-17',800,null,20);
INSERT INTO EMP VALUES(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600,300,30);
INSERT INTO EMP VALUES(7521,'WARD','SALESMAN',7698,'1981-02-22',1250,200,30);
INSERT INTO EMP VALUES(7566,'JONES','MANAGER',7839,'1981-04-02',2975,30,20);
INSERT INTO EMP VALUES(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250,300,30);
INSERT INTO EMP VALUES(7698,'BLAKE','MANAGER',7839,'1981-04-01',2850,null,30);
INSERT INTO EMP VALUES(7782,'CLARK','MANAGER',7839,'1981-06-01',2450,null,10);
INSERT INTO EMP VALUES(7788,'SCOTT','ANALYST',7566,'1982-10-09',3000,null,20);
INSERT INTO EMP VALUES(7839,'KING','PRESIDENT',null,'1981-11-17',5000,3500,10);
INSERT INTO EMP VALUES(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500,0,30);
INSERT INTO EMP VALUES(7876,'ADAMS','CLERK',7788,'1983-01-12',1100,null,20);
INSERT INTO EMP VALUES(7900,'JAMES','CLERK',7698,'1981-10-03',950,null,30);
INSERT INTO EMP VALUES(7902,'FORD','ANALYST',7566,'1981-10-3',3000,null,20);
INSERT INTO EMP VALUES(7934,'MILLER','CLERK',7782,'1982-01-23',1300,null,10);

 insert into  emp
        values( 8856, 'hong', 'sale', 7844, '1997-01-23', 1500, 30,30) ;

 insert into  emp
        values( 8878, 'lee', 'sale', 7876, '1998-07-29', 390, 150,20) ;

 insert into  emp
        values( 9900, 'kim', 'model', 7839, sysdate,  170,0, 30) ;

 insert into  emp
        values( 9934, 'goo', 'model', 7844, '1996-11-30',  3200, 210, 40) ;

insert into  emp
        values( 9935, 'gugu', 'teacher', 7839, sysdate, 2200, 400, 33) ;

commit ;


CREATE TABLE SALGRADE (
  GRADE int,
 LOSAL int,
 HISAL int
 );

INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);
insert into salgrade  values( 6, 4001,   6000 );
insert into salgrade  values( 7, 6001,   7000 );
insert into salgrade  values( 8, 7001,   9000 );
commit;



 CREATE TABLE  BONUS
  as 
  (
    select ename, job, sal, comm  from emp
  );



clear  screen
select  empno, ename, mgr from  emp;
col  job  for a10;
col  ename  for a10;
col  empno  for 9999;
col  dname  for a10;


=============================================================










=================================================================

SQL> select deptno, sum(sal) from  emp
     group by deptno ;

SQL> select deptno, count(empno) from emp
     group by deptno ;

DEPTNO COUNT(EMPNO)
------ ------------
    30            9
    20            5
    40            1
    33            1
    10            3

	  
문제] 직책이 매니저가 아닌 사원의 부서별 급여합계가 7000이상인 부서반환
SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		Having  sum(sal) >= 7000 


문제] 최대급여가 2900이상인 부서의 번호와 평균급여를 출력
SQL> select deptno, avg(sal)
		from emp
		group by deptno


----is null,  is not null 조건절로   검색
select  empno, ename, comm from emp
     where comm  is null ;

select  empno, ename, comm from emp
     where comm  is not null ;
       
   
----null을 다른값으로 변환 nvl( ) = null value
select  empno, ename, sal, nvl(comm, 0)  from emp;
select  empno, ename, sal, nvl(comm, 12)  from emp;


그룹함수-sum,avg,max,count
select  empno, ename, deptno,  sum(sal)  from emp; --에러
select  sum(sal)   from emp; --썰렁썰렁한 결과값 
  
select  avg(sum(sal)) from  emp ; --에러
select  max(avg(sal)) from emp;  --에러

select  max(avg(sal)) from emp  group by deptno ;  --에러없음 
select  avg(sum(sal)) from  emp  group by deptno ;
select  min(sal) from emp  group by deptno ;  --에러없음 
select  min(sal) from emp ;  --에러없음 

SQL> select deptno, sum(sal) from  emp
     group by deptno order by deptno ;


SQL> select deptno, sum(sal) from  emp
     group by deptno ;

SQL> select deptno, count(empno) from emp
     group by deptno ;

DEPTNO COUNT(EMPNO)
------ ------------
    30            9
    20            5
    40            1
    33            1
    10            3

deptno부서별 그룹 인원수 2이상인 데이터출력 
SQL> select deptno, count(empno) from emp
  2  group by deptno
  3  having count(empno)>2 ;

그룹조건은  where절이 아니라 having 
SQL> select deptno, count(empno) from emp
  2  where count(empno)>2
  3  group by deptno ;   --에러가 발생합니다 

      
SQL> select deptno, sum(sal) from emp
         group by deptno;

SQL> select deptno, sum(sal)
       from emp
       where job < > 'MANAGER'    
       group by deptno	;

SQL> select deptno, sum(sal) from  emp
      where job = 'MANAGER'
      group by deptno ;


--이미등록함insert into dept values( 22, 'coder ',  'seoul' );
--이미등록함insert into dept values( 33, 'developer',  'suwon' );

select  empno, ename,  sal , deptno ,
     case 
          when deptno=10  then   'Accounting'
          when deptno=20  then   'Reseach'
          when deptno=30  then   'sales'
          when deptno=40  then   'Operations'
          when deptno=22  then   'coder'
	  when deptno=33  then   'developer'
         else  '보류'
     end
from  emp ;


		  
문제] 직책이 매니저가 아닌 사원의 부서별 급여합계가 7000이상인 부서반환

SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		
SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		Having  sum(sal) >= 7000 




=======================================================================================
-- 서브쿼리 : select문에 포함되어 있는  select문                                            
1) SQL> select sal from emp where  ename='BLAKE'; 
2) SQL> select empno, ename, sal from emp where  sal > 2850 ; 

--두문장을 하나의 쿼리로 합치기 
select empno, ename, sal from emp
where  sal > (select sal from emp where ename='BLAKE') 


select empno, ename, sal from emp
where  sal =  (select sal from emp where ename='BLAKE') 
--단일열단일행이라서 의미가 없어요 

select empno, ename, sal from emp
where  sal in  (select sal from emp where ename='BLAKE') 
and   ename like  '%A%' ; 
		   

select empno, ename, sal from emp
where  sal in (select sal from emp where ename='BLAKE') 
or  ename like  '%A%' ; 



SQL> select empno, ename, sal from emp
     where  sal > (select sal from emp where ename='BLAKE') 

SQL> select   avg(sal)  from emp group by deptno ;
SQL> select deptno, avg(sal) from emp  group by deptno ;

SQL> select  * from emp   where  sal < 2300 ;

SQL> select *  from emp
    where  sal <  (select   avg(sal)  from emp group by deptno) ; -- 에러 

서브쿼리앞에 단일행 비교연산자일때 all키워드 기술
SQL> select *  from emp
    where  sal <   ALL (select  avg(sal)  from emp group by deptno) ;


반드시 테스트실습
-- 첫번째 부하직원이 없는 사람 조회
SQL> select  * from emp
	where empno not  in (select  nvl(mgr, 0) from emp) ;


-- 두번째 부하직원이 없는 사람 조회
 SQL> select * from emp  e 
	where e.empno not  in (
            select   m.mgr from emp m 
	    where m.mgr  is not null ) ; 

-- 세번째 부하직원이 없는 사람 조회
 SQL> select  *
	from emp  e 
	 where e.empno not  in (
              select   m.mgr from emp m 
             where  e.empno = m.mgr) ; 


-- 네번째 부하직원이 없는 사람 조회
SQL> select  *
        from emp  e 
	 where  not  exists (
             select  *  from emp m 
             where  e.empno = m.mgr  );


-- 다섯번째 부하직원이 없는 사람 조회
 SQL> select  e. *
	from emp  e , emp m 
	where   e.empno = m.mgr(+)
	and m.mgr is null ; 


-- group by 그룹by ,  having조건절응용
문제] 직책이 매니저가 아닌 사원의 부서별 급여합계가 7000이상인 부서반환

SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		
SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		Having  sum(sal) >= 7000 



----특정문자기호로 채우는 함수 Lpad/Rpad함수
SQL> select empno, ename, sal,  Lpad(sal, 10, '*') as 잔액 from emp ;

SQL>select  empno,ename,job, hiredate  from  emp;

----날짜일수를 구하는 함수   months_between함수 => 개월수
----날짜형 to_date,  문자형 to_char(sysdate, 'yyyymmdd')
SQL>  select * from guest where wdate <= '18/01/18';
SQL>  select * from guest where wdate < '18/01/18';

SQL> select  ename, hiredate , substr(to_char(hiredate, 'yy'),1,2)  from emp;
SQL> select empno, ename, job,
         to_char(hiredate, 'yyyy-mm-dd day' )  as 날짜 from emp ;
SQL> select  empno, ename, job, hiredate,
        trunc( months_between(sysdate,  hiredate) ) as 월수 from emp ;
SQL> select  empno, ename, job, hiredate,
         months_between(sysdate,  hiredate)  as 월수 from emp ;
SQL> select  empno,ename , job, hiredate,
        to_date(to_char(sysdate, 'yyyymmdd')) -    
        to_date(to_char(hiredate,'yyyymmdd'))  as 일수 from  emp ;
SQL> select  empno,ename , job, hiredate,
        round(sysdate-hiredate)  as 일수 from  emp ;
SQL> select * from emp  where  hiredate < to_date('1982/01/23') ;
SQL> select empno, ename, job, hiredate  from  emp
       where  hiredate  between  to_char('1981/01/01')  and to_char('1982/12/31') ;


SQL> select empno, ename, to_date(hiredate) from emp; --에러아님, to_date는 문자형식적용하면 에러발생
SQL> select empno, ename, to_date(hiredate, 'yyyy-MM-dd day') from emp; --에러
SQL> select empno, ename, to_char(hiredate, 'yyyy/MM/dd day' ) from emp ;

TO_DATE('2009/10/03', 'YYYY/MM/DD') + 3                -- 결과는 3일이 더해져서 2009/10/06
TO_DATE('2009/10/03', 'YYYY/MM/DD') + 48/24          --결과는 2일이 더해져서 2009/10/05
TO_DATE('2009/10/03', 'YYYY/MM/DD') - 3                 --결과는 -3일 빼져서 2009/09/30
TO_DATE('2009/10/03', 'YYYY/MM/DD') - TO_DATE('2009/10/02', 'YYYY/MM/DD')  결과는 1
TO_DATE('2009/10/02', 'YYYY/MM/DD') - TO_DATE('2009/10/03', 'YYYY/MM/DD')  결과는 -1


SQL> select  to_char(sal,'$09,999.99'), to_char(sal, 'L09,999.99') from emp;  --앞자리는0으로채워짐
SQL> select  to_char(sal,'$9,999.99'), to_char(sal, 'L9,999.99') from emp;    --L=local지역의 화폐단위 
SQL> select  to_char(sal,'$999.99'), to_char(sal, 'L999.99') from emp; --자릿수부족 ###표시


----is null,  is not null 조건절로   검색
SQL> select  empno, ename, comm from emp
            where comm  is null ;

----null을 다른값으로 변환 nvl( )
SQL> select  empno, ename, sal, nvl(comm, 0)  from emp;


그룹함수-sum,avg,max,count
SQL>select  empno, ename, deptno,  sum(sal)  from emp; --에러
SQL>select  sum(sal)   from emp; --썰렁썰렁한 결과값 

SQL> select  max(avg(sal)) from emp;  --그룹함수가 내포되었습니다 에러발생함
SQL> select  max(avg(sal)) from emp  group by deptno ;  --에러없음 

SQL> select deptno, sum(sal) from emp
         group by deptno;

SQL> select deptno, sum(sal)
         from emp
          where job < > 'MANAGER'
          group by deptno	;


SQL> select  empno, ename, nvl(comm, 0)  from emp;


 SQL>  select  empno, ename, nvl(comm, 0) , deptno ,
               case when deptno=10 then 'Accounting'
                     when deptno=20 then  'Reseach'
                    when deptno=30 then   'sales'
                    when deptno=40 then   'Operations'
                    else  '보류'
              end
      from  emp ;

select ename,to_char(hiredate,'YYYY"년"fmmm"월"DD"일"')" 입사일",
       case to_char(hiredate,'d')
            when '1' then 'sunday'
            when '2' then 'monday'
            when '3' then 'tuesday'
            when '4' then 'wednesday'
            when '5' then 'thursday'
            when '6' then 'friday'
            when '7' then 'saturday'
       end "입사요일"
from emp 
order by to_char(hiredate-1,'d') asc;	

	  
문제] 직책이 매니저가 아닌 사원의 부서별 급여합계가 7000이상인 부서반환
SQL> select deptno, sum(sal)
		from emp
		where job < > 'MANAGER'
		group by deptno
		Having  sum(sal) >= 7000 


문제] 최대급여가 2900이상인 부서의 번호와 평균급여를 출력
SQL> select deptno, avg(sal)
		from emp
		group by deptno


============================================================
============================================================
============================================================

7월7일 화요일
SQL> select *  from  user_tables;
SQL> select table_name from user_tables;

SQL> select *  from  user_views;
SQL> select view_name from user_views;

SQL> select *  from  user_sequences;
SQL> select sequence_name from user_sequences;

SQL> select *  from  user_constraints;
SQL> select constraint_name from user_constraints;

 
SQL> select * from sosi ;
SQL> select * from test ;

SQL> create table  sosiCOPY  
     as
     select * from  sosi ; 

SQL> select * from sosiCOPY ;

SQL> create table  sosiTIS  
     as
     select * from  sosi where 0=1

SQL> commit ;
SQL> select * from sosiTIS;  ---구조만
SQL> select * from sosiCOPY ; ---구조+데이터

SQL> create table  sosiMY  
     as
     select * from  sosi where id > 3000;

SQL> select * from sosiMY;  ---조건에합당한 데이터로 테이블생성



SQL>  drop view emp_view;

SQL> create view  emp_view
     as
     select * from emp 
     where sal > 2500 ;

SQL> select * from  emp_view ;



SQL> drop sequence  bbs_seq ;
SQL> create sequence  bbs_seq ; --1부터시작 1씩증가 
SQL> select sequence_name from user_sequences; --시퀀스

SQL> select bbs_seq.currval from dual ; --시퀀스현재값 확인


SQL> drop table bbs ;
SQL> create table   bbs  (
          key number  primary key ,
          name varchar2(10) not null  ,
          pay number(3)  
       )  ;
SQL> commit ;

SQL>insert into  bbs  values(bbs_seq.nextval,'abc',23);
SQL>insert into  bbs  values(bbs_seq.nextval, 'xyz',34);
SQL>insert into  bbs  values(bbs_seq.nextval, 'blue',78);
SQL> commit;
SQL> select * from  bbs ;

SQL>insert into  bbs  values(7764, 'red',45);
SQL>insert into  bbs  values(7765, 'orange',56);
SQL>insert into  bbs  values(bbs_seq.nextval, 'lee',21);
SQL> commit;
SQL> select * from  bbs ;

SQL> delete from  bbs   where name='xyz' ;
SQL> select * from  bbs ;
SQL> insert  into   bbs  values(test _seq.nextval, 'oreo', 41) ;
SQL> select * from  bbs  ;   
SQL> commit ;

SQL> select sequence_name from user_sequences;
SQL>insert into  bbs  values(7764, 'cc', 21);  --에러발생
SQL>insert into  bbs  values(7765, 'orange',56);




제약에는 5가지종류가 있습니다
1) Not null :  컬럼에 null값 허용하지 않음
2) unique : 컬럼값이 유일해야 함 pk = not null + unique
3) primary key : 컬럼값이 유일하고  null허용하지 않음 (PK)
4) Foreign key : 다른테이블의 컬럼을 참조하는 키(FK) 
                 dept테이블(deptno유일한값)  emp(deptno중복)      
5) check : 컬럼조건에 참인값만 허용함 
--check 제약조건삭제 없으면 에러 발생합니다 
--제약조건에서 없는 입력을 방지할수 있습니다


SQL>select  * from tab ;  --테이블이름확인
SQL>select  table_name from user_tables ; --테이블이름확인
SQL>drop  drop temp ;

SQL> create table  temp(
    empid  number(4) ,
    empname  varchar2(10) ,
    sal  number(7,2)  ,         
    comm  number(5,2) ,
    constraint  TEMP_chk_sal  check(sal>comm)  
);       --만약에  보너스가 더 크면 check제약  
 
SQL> commit ;
SQL>select  constraint_name from user_constraints ; --제약조건이름확인

SQL>insert into temp values( 2234, 'aaa', 4500, 91) ;
SQL>insert into temp values( 2237, 'bbb', 4500, 91) ;
SQL>commit ;
SQL>select  * from temp ;
SQL>insert into temp values( 7799, 'ccc', 3400, 7600) ; 
SQL>insert into temp values( 2239, 'ccc', 780, 9800) ; --제약조건에러
SQL>insert into temp values( 3345, 'ddd', 4500, 91) ;


SQL> select file_name from dba_data_files;   --dbf파일확인가능
SQL> select file_name from dba_data_files;   --dbf파일확인가능

--port번호 변경  웹서버포트 8080/ 오라클포트를 9000변경하면 좋아요
시작 =>  cmd창 ->  sqlplus   system/1234
SQL>  select dbms_xdb.getHttpPort() from dual;  --포트확인
SQL>  exec dbms_xdb.setHttpPort(9000);          -- 8080에서 9000으로 변경   
SQL>  commit ;
SQL>  select dbms_xdb.getHttpPort() from dual;   --포트확인








================================================================================

SQL> spool C:\Mtest\test0703.sql
     

    drop  table test ;
    create  table test ( 
      code  number(4) primary key  ,
      name  varchar2(10),
      title varchar2(10),
      wdate date ,
      cnt  number(3)
    ) ;

insert into test values(9991,'orange','like',sysdate, 46);
insert into test values(9992,'apple','best',sysdate,97);
insert into test values(9993,'cherry','firt',sysdate,36);

insert into test values(7771,'red','right',sysdate, 39);
insert into test values(7772,'blue','dark',sysdate,21);
insert into test values(7773,'green','color',sysdate,45);

insert into test values(3300,'aa','rain',sysdate,7);
insert into test values(3345,'bb','snow',sysdate,8);
insert into test values(3347,'cc','java',sysdate,9);

insert into test values(1100,'tis','sun',sysdate,5);
insert into test values(2200,'jis','mon',sysdate,0);
insert into test values(7700,'kim','fri',sysdate,0);
commit ;

insert into test values(5500,'lee','red',sysdate,0);
insert into test values(5533,'goo','blue',sysdate,0);
insert into test values(5578,'choi','green',sysdate,0);
commit ;
select * from test  ;


SQL> select * from test  ;




drop table emp ;
drop table dept ;
drop table salgrade ;
drop table bonus ;


CREATE TABLE dept (
   DEPTNO int,
   DNAME VARCHAR(14),
   LOC VARCHAR(13)
 );

INSERT INTO DEPT VALUES (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES (30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES (40,'OPERATIONS','BOSTON');
insert into dept values( 33, 'developer',  'suwon' );
insert into dept values( 22, 'coder ',  'seoul' );
insert into dept values( 11, 'designer ',  'LA' );


CREATE TABLE emp (
   EMPNO int not null ,
   ENAME VARCHAR(10) ,
   JOB VARCHAR(9) ,
   MGR int ,
   HIREDATE date ,
   SAL int ,
   COMM int ,
   DEPTNO int
 );

commit;
INSERT INTO EMP VALUES(7369,'SMITH','CLERK',7902,'1980-12-17',800,null,20);
INSERT INTO EMP VALUES(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600,300,30);
INSERT INTO EMP VALUES(7521,'WARD','SALESMAN',7698,'1981-02-22',1250,200,30);
INSERT INTO EMP VALUES(7566,'JONES','MANAGER',7839,'1981-04-02',2975,30,20);
INSERT INTO EMP VALUES(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250,300,30);
INSERT INTO EMP VALUES(7698,'BLAKE','MANAGER',7839,'1981-04-01',2850,null,30);
INSERT INTO EMP VALUES(7782,'CLARK','MANAGER',7839,'1981-06-01',2450,null,10);
INSERT INTO EMP VALUES(7788,'SCOTT','ANALYST',7566,'1982-10-09',3000,null,20);
INSERT INTO EMP VALUES(7839,'KING','PRESIDENT',null,'1981-11-17',5000,3500,10);
INSERT INTO EMP VALUES(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500,0,30);
INSERT INTO EMP VALUES(7876,'ADAMS','CLERK',7788,'1983-01-12',1100,null,20);
INSERT INTO EMP VALUES(7900,'JAMES','CLERK',7698,'1981-10-03',950,null,30);
INSERT INTO EMP VALUES(7902,'FORD','ANALYST',7566,'1981-10-3',3000,null,20);
INSERT INTO EMP VALUES(7934,'MILLER','CLERK',7782,'1982-01-23',1300,null,10);

 insert into  emp
        values( 8856, 'hong', 'sale', 7844, '1997-01-23', 1500, 30,30) ;

 insert into  emp
        values( 8878, 'lee', 'sale', 7876, '1998-07-29', 390, 150,20) ;

 insert into  emp
        values( 9900, 'kim', 'model', 7839, sysdate,  170,0, 30) ;

 insert into  emp
        values( 9934, 'goo', 'model', 7844, '1996-11-30',  3200, 210, 40) ;

insert into  emp
        values( 9935, 'gugu', 'teacher', 7839, sysdate, 2200, 400, 33) ;

commit ;


CREATE TABLE SALGRADE (
  GRADE int,
 LOSAL int,
 HISAL int
 );

INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);
insert into salgrade  values( 6, 4001,   6000 );
insert into salgrade  values( 7, 6001,   7000 );
insert into salgrade  values( 8, 7001,   9000 );
commit;


clear  screen
select  empno, ename, mgr from  emp;
col  job  for a10;
col  ename  for a10;
col  empno  for 9999;
col  dname  for a10;



-------- 아래실습은 같이해요 
 CREATE TABLE  BONUS as (
    select ename, job, sal, comm  from emp
 );





==================================================================================
DML언어 조작하는 언어
|- select 추출=조회=> 전체조회, 한건조회, 다수개조회
SQL> select * from test  ; 조건없이 모든데이터출력
SQL> select 필드 from T where 필드 == 값 ;  에러
SQL> select * from test where code = 3300 ; 
SQL> select * from test where code = 7772 ; 
SQL> select * from test where cnt > 70 ; 
SQL> select * from test where cnt <=70 ; 
SQL> commit ;
SQL> clear screen;
SQL> select * from test where name = 'tis' ;
SQL> select * from test where name = 'Tis' ;  --데이터출력X
SQL> select * from test where name = 'TIS' ;
SQL> select * from test where name  like = '%s%' ; --에러
SQL> select * from test where name  like '%s%' ; 
SQL> select * from test where title like '%e%' ; 
SQL> select * from test where title like '%t%' ; 

소트=sort
SQL> select * from test  order by code ;
SQL> select * from test  order by code desc ;
SQL> select * from test  order by cnt desc ;
SQL> select * from test where code > 5500 ; 
SQL> select * from test where code >= 5500 ; 
SQL> select * from test 
     where code >= 5500 order by code ;

SQL> select * from test 
     where code >= 5500 order by code  desc ;
     
SQL> select * from test 
     where code >= 5500 order by code asc ;

SQL> select * from test  order by code ;

행번호 rownum 조건없이,order by 없이 
문제1]  행번호 rownum,열=필드표시
SQL> select rownum, * from test  ;  -- 에러
SQL> select rownum, code,name,title,wdate,cnt from test ;
SQL> select  code,name,tile,wdate,cnt from test ; 에러

SQL문장명령어 대소문자 구별없어요, SQL꺽쇠=프롬프트> 기술할때sql ~~;
SQL> select * from test where name='lee';
SQL> select * from test where name=='lee'; 에러
SQL> select * from test where title='rain';
SQL> select * from test where name like  '%e%';
SQL> select * from test where title like '%a%';
SQL> col name for a10
SQL> col title for a10
SQL> col cnt for 999

SQL> select rownum, code,name,title,wdate,cnt from test ;
SQL> select rownum, ts.* from test ts ;

SQL>  select  2+3*7-4  from  dual  ;

SQL>clear screen

DML언어 조작하는 언어
|- select 추출=조회=> 전체조회, 한건조회, 다수개조회
   레코드갯수 cnt필드조회수 필드
   레코드갯수 15건 
   count(*) 
   count(code)


SQL> select * from test ;
SQL> select count(*)  from test ;
SQL> select count(*) ct  from test ;
SQL> select count(*) as ct  from test ;
SQL> select count(*) 총갯수  from test ;
SQL> select count(*) Gtotal  from test ;
SQL> select * from test where name like  '%e%';
SQL> select  count(*) Gtotal from test where name like '%e%';

문제2] code > 5500 레코드갯수
SQL> select * from test where code > 5500 ; 
SQL> select count(*) as Gtotal  from test ;
SQL> select count(*) as Gtotal from test where code > 5500 ; 


SQL> select count(code) as Gtotal  from test ;
SQL> select max(cnt)  from test ;
SQL> select min(cnt)  from test ;
SQL> select code, name, title from test ;  --원하는필드만 
SQL> commit ;


SQL> delete * from test ;  --에러
SQL> delete  from test where  code < 6600  ;  
SQL> select * from test ;  --진짜삭제처리X, 데이터만 안보임
SQL> rollback ;
SQL> select * from test ;

SQL> delete  from test where  code > 6600  ;  
SQL> commit ;
SQL> select * from test ;

문제3] code 7700 , code 8800 => 2건 입력 
       나머지 필드데이터값은 여러분 

SQL> insert into test(code,name,title,wdate)
 2   values( 8811,'first', 'one', sysdate) ;

SQL> insert into test(code,name,title,wdate)
 2   values( 8822,'two', 'three', sysdate) ;

SQL> insert into test(code,name,title,wdate)
 2   values( 8833,'orange', 'fruit', sysdate) ;

SQL> commit ;
SQL> select * from  test ;
SQL> select * from  test order by code asc  ; --asc생략가능
SQL> select * from  test order by code desc ;

SQL> select * from  test where cnt is null ;
SQL> select * from  test where cnt is not null ;


문제4] name필드 bb인사람의 데이터 cnt 79, title제목은 friday
문제5] name필드 cc인사람의 데이터 cnt 98, title제목은 sunday

SQL> update 테이블 set   필드=변경값  where  필드=데이터
SQL> update test set cnt=79, title='friday' 
     where  name='bb' ; 

SQL> update test set  cnt=98, title='sunday'  
     where  name='cc' ; 

=================================================
=================================================
아래문장 실습금지 
오후에 dept,salgrade,emp테이블
SQL> delete  from test where  code > 2000  ;  
SQL> commit ;
SQL> select * from test ;
=================================================
=================================================
=================================================
    7~10개데이터 신규등록
    commit ;
    	
SQL> 


수업종료후 반드시 문 닫아주세요 
SQL> spool off 
SQL> exit
C:\Users\USER> exit

=========================================

SQL> clear screen
SQL> spool  C:\Mtest\note0702.sql 



00.OracleSQL문법_정리(tis).txt문서
00.처음guest(email).txt
01.emp(테이블구조).bmp
02.emp(테이블데이터).txt
empschema.sql
오라클PLSQL교재import명령.txt
(배포)emp테이블학생실습.txt
(배포)소녀시대테이블내장함수.txt
(배포)오라클tablespace생성.txt

윈도우버튼오른쪽 빈칸에  검색창 cmd입력
C:\Users\USER> sqlplus system/1234
SQL> clear screen
SQL> desc  test ;
SQL> 
SQL> select * from test ;
SQL> clear screen ;
SQL> exit
C:\Users\USER> exit



수업은
(배포)소녀시대테이블내장함수.txt문서로 진행후
교재있는내용으로 진행




